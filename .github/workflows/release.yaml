name: Release

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string

permissions:
  contents: write

env:
  RELEASER_DIR: releaser

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Show the version
      run: |
        echo "version is: v${{ inputs.tag }}"

    - name: Create GitHub release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release --repo ${{ github.repository }} create v${{ inputs.tag }} --draft --title v${{ inputs.tag }}

  build-release:
    name: build-release
    needs: create-release
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ''
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-musl
          strip: x86_64-linux-musl-strip
        - build: stable-x86
          os: ubuntu-latest
          rust: stable
          target: i686-unknown-linux-gnu
          strip: x86_64-linux-gnu-strip
          qemu: i386
        - build: stable-aarch64
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          strip: aarch64-linux-gnu-strip
          qemu: qemu-aarch64
        - build: stable-arm-gnueabihf
          os: ubuntu-latest
          rust: stable
          target: armv7-unknown-linux-gnueabihf
          strip: arm-linux-gnueabihf-strip
          qemu: qemu-arm
        - build: stable-arm-musleabihf
          os: ubuntu-latest
          rust: stable
          target: armv7-unknown-linux-musleabihf
          strip: arm-linux-musleabihf-strip
          qemu: qemu-arm
        - build: stable-arm-musleabi
          os: ubuntu-latest
          rust: stable
          target: armv7-unknown-linux-musleabi
          strip: arm-linux-musleabi-strip
          qemu: qemu-arm
        - build: stable-powerpc64
          os: ubuntu-latest
          rust: stable
          target: powerpc64-unknown-linux-gnu
          strip: powerpc64-linux-gnu-strip
          qemu: qemu-ppc64
        - build: stable-s390x
          os: ubuntu-latest
          rust: stable
          target: s390x-unknown-linux-gnu
          strip: s390x-linux-gnu-strip
          qemu: qemu-s390x
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-latest
          rust: nightly
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: "releaser"

    - name: Install packages (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        releaser/ci/ubuntu-install-packages

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      if: matrix.os == 'ubuntu-latest' && matrix.target != ''
      shell: bash
      run: |
        # In the past, new releases of 'cross' have broken CI. So for now, we
        # pin it. We also use their pre-compiled binary releases because cross
        # has over 100 dependencies and takes a bit to compile.
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz
        echo "CARGO=cross" >> $GITHUB_ENV

    - name: Set target variables
      shell: bash
      run: |
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      shell: bash
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Checkout eza repository
      uses: actions/checkout@v4
      with:
        repository: eza-community/eza
        ref: v${{ inputs.tag }}

    - name: Build release binary
      shell: bash
      run: |
        rustup target add ${{ matrix.target }}
        ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          bin="target/${{ matrix.target }}/release/eza.exe"
        else
          bin="target/${{ matrix.target }}/release/eza"
        fi
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macos)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: strip "$BIN"

    - name: Strip release binary (cross)
      if: env.CARGO == 'cross'
      shell: bash
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          "ghcr.io/cross-rs/${{ matrix.target }}:main" \
          "${{ matrix.strip }}" \
          "/$BIN"

    - name: Determine archive name
      shell: bash
      run: |
        echo "ARCHIVE=eza-${{ inputs.tag }}-${{ matrix.target }}" >> $GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        mkdir -p "$ARCHIVE"/doc
        cp "$BIN" "$ARCHIVE"/
        cp {README.md,LICENCE} "$ARCHIVE"/
        cp CHANGELOG.md "$ARCHIVE"/doc/

    - name: Build archive (Windows)
      shell: bash
      if: matrix.os == 'windows-latest'
      run: |
        7z a "$ARCHIVE.zip" "$ARCHIVE"
        certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
        echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV

    - name: Build archive (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      run: |
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    - name: Upload release archive
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
      run: |
        gh release --repo ${{ github.repository }} upload v${{ inputs.tag }} ${{ env.ASSET }} ${{ env.ASSET_SUM }}

  finish-release:
    name: finish-release
    if: ${{ success() }}
    needs: build-release
    runs-on: ubuntu-latest
    steps:
    - name: Publish GitHub release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release --repo ${{ github.repository }} edit v${{ inputs.tag }} --draft=false --title v${{ inputs.tag }} --latest

  delete-release:
    name: delete-release
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.create-release.result != 'success' || needs.build-release.result != 'success') }}
    steps:
    - name: Create GitHub release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release --repo ${{ github.repository }} delete v${{ inputs.tag }}
